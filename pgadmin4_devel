Doc：https://git.postgresql.org/gitweb/?p=pgadmin4.git;a=blob_plain;f=README
ref: https://blog.csdn.net/vah101/article/details/72854627?locationNum=1&fps=1

1.env
os： centos7

Dependency：
Qt install： https://segmentfault.com/a/1190000008476086
python2.7+ install
python-devel install (fpr python-config file)

Add ../Qt/bin to PATH.

2.built runtime
cd $PGADMIN4_SRC/runtime 
qmake
make

3.Create db migration ?
 wget  https://www.sqlite.org/src/tarball/sqlite.tar.gz?r=release
 tar zxvf sqlite.tar.gz\?r\=release 
 cd sqlite
 ./configure
 make
 make install


4.Configuring the Python Environment
----------------------------------

In order to run the Python code, a suitable runtime environment is required.
Python versions - Python 2.6, 2.7 or 3.3+ are currently supported. It is
recommended that a Python Virtual Environment is setup for this purpose,
rather than using the system Python environment. On Linux and Mac systems, the
process is fairly simple - adapt as required for your distribution:

1) Install the virtualenv packages into the system Python environment

    $ sudo pip install virtualenv virtualenvwrapper

2) Source the virtualenv wrapper tools script. You may want to add this command
   to your ~/.bash_profile file for future convenience:

    $ source /usr/local/bin/virtualenvwrapper.sh

3) Create a virtual environment:

    $ mkvirtualenv pgadmin4

   To make use of the virtual environment in the future, use the following
   command to re-activate it:

    $ workon pgadmin4

4) Ensure that a PostgreSQL installation's bin/ directory is in the path (so
   pg_config can be found for building psycopg2), and install the required
   packages:

    (pgadmin4) $ PATH=$PATH:/usr/local/pgsql/bin pip install -r $PGADMIN4_SRC/requirements.txt

   If you are planning to run the regression tests, you also need to install
   additional requirements from web/regression/requirements.txt:

   (pgadmin4) $ pip install -r $PGADMIN4_SRC/web/regression/requirements.txt

5) Create a local configuration file for pgAdmin. Edit
   $PGADMIN4_SRC/web/config_local.py and add any desired configuration options
   (use the config.py file as a reference - any settings duplicated in
   config_local.py will override those in config.py). A typical development
   configuration may look like:

    from config import *

    # Debug mode
    DEBUG = True

    # App mode
    SERVER_MODE = True

    # Enable the test module
    MODULE_BLACKLIST.remove('test')

    # Log
    CONSOLE_LOG_LEVEL = DEBUG
    FILE_LOG_LEVEL = DEBUG

    DEFAULT_SERVER = '127.0.0.1'

    UPGRADE_CHECK_ENABLED = True

    # Use a different config DB for each server mode.
    if SERVER_MODE == False:
        SQLITE_PATH = os.path.join(
            DATA_DIR,
            'pgadmin4-desktop.db'
        )
    else:
        SQLITE_PATH = os.path.join(
            DATA_DIR,
            'pgadmin4-server.db'
        )

   This configuration allows easy switching between server and desktop modes
   for testing.

6) The initial setup of the configuration database is interactive in server
   mode,  and non-interactive in desktop mode. You can run it either by
   running:

    (pgadmin4) $ python $PGADMIN4_SRC/web/setup.py

   or by starting pgAdmin 4:

    (pgadmin4) $ python $PGADMIN4_SRC/web/pgAdmin4.py

   Whilst it is possible to automatically run setup in desktop mode by running
   the runtime, that will not work in server mode as the runtime doesn't allow
   command line interaction with the setup program.

At this point you will be able to run pgAdmin 4 from the command line in either
server or desktop mode, and access it from a web browser using the URL shown in
the terminal once pgAdmin has started up.

Setup of an environment on Windows is somewhat more complicated unfortunately,
largely due to the lack of a native compiler toolset. Thankfully, Microsoft
supply a free compiler specifically for Python 2.7 users. Download and install
it from:

https://www.microsoft.com/en-gb/download/details.aspx?id=44266

A blog detailing the setup of Virtual Environments on Windows can be found
here:

http://www.tylerbutler.com/2012/05/how-to-install-python-pip-and-virtualenv-on-windows-with-powershell/

Once a virtual environment has been created and enabled, setup can continue
from step 4 above.


